<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.2.0">
<procedure name="main">
<interface/>
<body>
<c>* 这个例子是一系列示例的一部分，总结了DL分类的工作流程。它使用了MVTec pill数据集。</c>
<c>* 四个部分分别是：</c>
<c>* 1. 数据集预处理。</c>
<c>* 2. 模型训练。</c>
<c>* 3. 对训练模型进行评估。</c>
<c>* 4. 对新图像进行推断。</c>
<c>* </c>
<c>* 本示例包含第3部分：'对训练模型进行评估'。</c>
<c>* </c>
<c>* 请注意：此示例需要第1部分的输出：</c>
<c>* classify_pill_defects_deep_learning_1_preprocess.hdev。</c>
<c>* 如果将UsePretrainedModel设置为false，则还需要第2部分的输出：</c>
<c>* classify_pill_defects_deep_learning_2_train.hdev。</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* 在这个例子中，评估过程将在图形窗口中进行解释，然后再执行。将以下参数设置为false以跳过此可视化。</c>
<l>ShowExampleScreens := true</l>
<c>* </c>
<c>* 默认情况下，此示例使用MVTec预训练的模型。要使用此示例系列的第2部分中训练的模型，请将以下变量设置为false。</c>
<l>UsePretrainedModel := true</l>
<c>* </c>
<c>* 评估可以在GPU或CPU上执行。</c>
<c>* 请参阅安装指南中的相应系统要求。</c>
<c>* 如果可能，此示例将使用GPU。</c>
<c>* 如果您明确希望在CPU上运行此示例，请选择CPU设备。</c>
<l>query_available_dl_devices (['runtime', 'runtime'], ['gpu', 'cpu'], DLDeviceHandles)</l>
<l>if (|DLDeviceHandles| == 0)</l>
<l>    throw ('未找到支持的设备以继续此示例。')</l>
<l>endif</l>
<c>* 由于在query_available_dl_devices中使用的过滤器，如果可用，第一个设备将是GPU。</c>
<l>DLDevice := DLDeviceHandles[0]</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * 初始示例窗口和参数等。</c>
<l>    dev_example_init (ShowExampleScreens, UsePretrainedModel, ExampleInternals)</l>
<c>    * </c>
<c>    * 示例系列介绍文本。</c>
<l>    dev_display_screen_introduction (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 评估指标。</c>
<l>    dev_display_screen_evaluation_measures (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_topK (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_confusion_matrix (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_precision_recall_f1score (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 视觉检查。</c>
<l>    dev_display_screen_visual_inspection_intro (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 模型优化。</c>
<l>    dev_display_screen_model_optimization_info (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 提及深度学习运算符将在哪个设备上运行。</c>
<l>    dev_display_screen_device (ExampleInternals, DLDevice)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 启动程序。</c>
<l>    dev_display_screen_run_program (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 终止示例屏幕。</c>
<l>    dev_display_example_reset_windows (ExampleInternals)</l>
<l>endif</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************</c>
<c>* **   设置评估的路径和参数   ***</c>
<c>* ******************************************************</c>
<c>* </c>
<c>* 路径。</c>
<c>* </c>
<c>* 用于由HALCON编写的任何输出的项目目录。</c>
<l>ExampleDataDir := 'classify_pill_defects_data'</l>
<c>* 预处理的DLDataset文件路径。</c>
<c>* 注意：在使用其他图像大小进行预处理后，请调整DataDirectory。</c>
<l>DataDirectory := ExampleDataDir + '/dldataset_pill_300x300'</l>
<l>DLDatasetFileName := DataDirectory + '/dl_dataset.hdict'</l>
<c>* </c>
<l>if (UsePretrainedModel)</l>
<c>    * 使用HALCON预装的预训练模型。</c>
<l>    RetrainedModelFileName := 'classify_pill_defects.hdl'</l>
<l>else</l>
<c>    * 重新训练的分类模型的路径。</c>
<l>    RetrainedModelFileName := ExampleDataDir + '/best_dl_model_classification.hdl'</l>
<l>endif</l>
<c>* </c>
<c>* 评估参数。</c>
<c>* </c>
<c>* 评估指标。</c>
<l>ClassificationMeasures := ['top1_error', 'precision', 'recall', 'f_score', 'absolute_confusion_matrix', 'relative_confusion_matrix']</l>
<c>* 在评估期间使用的批量大小。</c>
<l>BatchSize := 10</l>
<c>* </c>
<c>* **********************************</c>
<c>* **   对模型进行评估   ***</c>
<c>* **********************************</c>
<c>* </c>
<c>* 检查所有必需的文件是否存在。</c>
<l>check_data_availability (ExampleDataDir, DLDatasetFileName, RetrainedModelFileName, UsePretrainedModel)</l>
<c>* </c>
<c>* 读取重新训练的模型。</c>
<l>read_dl_model (RetrainedModelFileName, DLModelHandle)</l>
<c>* </c>
<l>set_dl_model_param (DLModelHandle, 'batch_size', BatchSize)</l>
<c>* </c>
<l>set_dl_model_param (DLModelHandle, 'device', DLDevice)</l>
<c>* </c>
<c>* 读取预处理的DLDataset文件。</c>
<l>read_dict (DLDatasetFileName, [], [], DLDataset)</l>
<c>* </c>
<c>* 设置评估参数。</c>
<l>GenParamEval := dict{measures: ClassificationMeasures, show_progress: 'true'}</l>
<c>* </c>
<c>* 评估重新训练的模型。</c>
<l>evaluate_dl_model (DLDataset, DLModelHandle, 'split', 'test', GenParamEval, EvaluationResult, EvalParams)</l>
<c>* </c>
<c>* </c>
<c>* ******************************</c>
<c>* **   显示结果   ***</c>
<c>* ******************************</c>
<c>* </c>
<c>* 显示指标。</c>
<l>WindowHandleDict := dict{}</l>
<l>GenParamEvalDisplay := dict{}</l>
<l>GenParamEvalDisplay.display_mode := ['measures', 'pie_charts_precision', 'pie_charts_recall', 'absolute_confusion_matrix']</l>
<l>dev_display_classification_evaluation (EvaluationResult, EvalParams, GenParamEvalDisplay, WindowHandleDict)</l>
<l>dev_disp_text ('按F5继续', 'window', 'bottom', 'right', 'black', [], [])</l>
<c>* </c>
<l>stop ()</l>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<c>* 调用交互式混淆矩阵。</c>
<l>dev_display_dl_interactive_confusion_matrix (DLDataset, EvaluationResult, [])</l>
<c>* </c>
<c>* 关闭窗口句柄。</c>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<c>* </c>
<c>* **************************************</c>
<c>* **   图像的视觉检查   ***</c>
<c>* **************************************</c>
<c>* </c>
<c>* 为了更仔细地检查一些示例，</c>
<c>* 计算并显示热图。</c>
<c>* 在这里，我们选择了标记为'contamination'的样本。</c>
<c>* </c>
<l>SelectedHeatmapGTClassName := 'contamination'</l>
<l>SelectedHeatmapInfClassName := 'contamination'</l>
<c>* </c>
<c>* 从DLDataset和EvaluationResult获取信息。</c>
<l>EvaluatedSamples := EvaluationResult.evaluated_samples</l>
<l>ImageIDs := EvaluatedSamples.image_ids</l>
<l>ImageLabelIDs := EvaluatedSamples.image_label_ids</l>
<l>Predictions := EvaluatedSamples.top1_predictions</l>
<l>ClassNames := DLDataset.class_names</l>
<l>ClassIDs := DLDataset.class_ids</l>
<c>* 获取所选类别的类ID。</c>
<l>PredictedClassID := ClassIDs[find(ClassNames,SelectedHeatmapInfClassName)]</l>
<l>GroundTruthClassID := ClassIDs[find(ClassNames,SelectedHeatmapGTClassName)]</l>
<c>* 获取所选类别的元组位置。</c>
<l>GTIndices := find(ImageLabelIDs [==] GroundTruthClassID,1)</l>
<l>PredictionIndices := find(Predictions [==] PredictedClassID,1)</l>
<c>* 获取所选组合的图像ID。</c>
<l>ImageIDsSelected := []</l>
<l>if (PredictionIndices != -1 and PredictionIndices != [])</l>
<l>    ImageIDsSelected := ImageIDs[intersection(GTIndices,PredictionIndices)]</l>
<l>endif</l>
<c>* </c>
<c>* 支持两种热图方法：</c>
<c>* 1) 'grad_cam'</c>
<c>* 2) 'guided_grad_cam'</c>
<c>* </c>
<l>HeatmapMethod := ['guided_grad_cam', 'grad_cam']</l>
<l>if (|HeatmapMethod| == 0)</l>
<l>    throw ('未选择热图方法 - 请继续选择一个方法。')</l>
<l>endif</l>
<c>* </c>
<c>* 设置目标类ID或[]以显示热图</c>
<c>* 用于分类的类别。</c>
<l>TargetClassID := []</l>
<l>HeatmapParam := dict{}</l>
<c>* 设置操作符热图的通用参数。</c>
<l>HeatmapParam.use_conv_only := 'false'</l>
<l>HeatmapParam.scaling := 'scale_after_relu'</l>
<c>* </c>
<c>* 热图按顺序显示，因此将批量大小设置为1。</c>
<l>set_dl_model_param (DLModelHandle, 'batch_size', 1)</l>
<c>* </c>
<c>* 为所选示例可视化热图。</c>
<l>WindowHandleDict := dict{}</l>
<l>for Index := 0 to min([|ImageIDsSelected| - 1,10]) by 1</l>
<c>    * 选择相应的DLSample。</c>
<l>    find_dl_samples (DLDataset.samples, 'image_id', ImageIDsSelected[Index], 'match', DLSampleIndex)</l>
<l>    read_dl_samples (DLDataset, DLSampleIndex, DLSample)</l>
<c>    * 生成热图图像</c>
<l>    DLResultCollected := dict{}</l>
<l>    DisplayOptions := 'image'</l>
<l>    for IndMet := 0 to |HeatmapMethod| - 1 by 1</l>
<l>        CurrentMethod := HeatmapMethod[IndMet]</l>
<l>        gen_dl_model_heatmap (DLModelHandle, DLSample, CurrentMethod, TargetClassID, HeatmapParam, DLResult)</l>
<l>        DLResultCollected.['heatmap_' + CurrentMethod] := DLResult.['heatmap_' + CurrentMethod]</l>
<l>        DisplayOptions := [DisplayOptions,'heatmap_' + CurrentMethod]</l>
<l>    endfor</l>
<l>    DLResultCollected.['classification_class_ids'] := DLResult.['classification_class_ids']</l>
<l>    DLResultCollected.['classification_class_names'] := DLResult.['classification_class_names']</l>
<l>    DLResultCollected.['classification_confidences'] := DLResult.['classification_confidences']</l>
<c>    * 显示收集的结果。</c>
<l>    dev_display_dl_data (DLSample, DLResultCollected, DLDataset, DisplayOptions, [], WindowHandleDict)</l>
<l>    dev_disp_text ('按F5继续。', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* 优化内存消耗。</c>
<l>set_dl_model_param (DLModelHandle, 'optimize_for_inference', 'true')</l>
<l>write_dl_model (DLModelHandle, RetrainedModelFileName)</l>
<c>* 关闭窗口。</c>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * 显示最终屏幕。</c>
<l>    dev_display_screen_final (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * 关闭示例窗口。</c>
<l>    dev_close_example_windows (ExampleInternals)</l>
<l>endif</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dev_display_screen_introduction">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows an overview on all example parts.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'This example is part of a series of examples, which summarize '</l>
<l>Text[|Text|] := 'the workflow for DL classification.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The four parts are: '</l>
<l>Text[|Text|] := '1. Dataset preprocessing.'</l>
<l>Text[|Text|] := '2. Training of the model.'</l>
<l>Text[|Text|] := '3. Evaluation of the trained model.'</l>
<l>Text[|Text|] := '4. Inference on new images.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'This example covers part 3: \'Evaluation of the trained model\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_introduction">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_precision_recall_f1score">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the entities precision, recall and F1-score..</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'Evaluation measures: Precision, Recall, and F1-score'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The precision is the proportion of'</l>
<l>Text[|Text|] := 'all correctly predicted positives (TP) to'</l>
<l>Text[|Text|] := 'all predicted positives (TP and FP).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The recall, also called the "true positive rate", is the proportion of'</l>
<l>Text[|Text|] := 'all correctly predicted positives (TP) to'</l>
<l>Text[|Text|] := 'all real positives (TP and FN).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'To represent precision and recall with a single number, we compute'</l>
<l>Text[|Text|] := 'the harmonic mean (F1-score) of precision and recall.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_precision_recall_f1score">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_image_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display example images.</c>
<c></c>
<l>WindowHeightText := 300</l>
<l>WindowWidthImage := 500</l>
<l>WindowHeightImages := 500</l>
<l>WindowBGColor := 'gray'</l>
<c></c>
<l>WindowYImages := WindowHeightText + 60</l>
<l>WindowXImages := 0</l>
<l>dev_open_window (WindowYImages, WindowXImages, WindowWidthImage, WindowHeightImages, WindowBGColor, WindowHandleImages)</l>
<l>set_display_font (WindowHandleImages, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_width', WindowWidthImage)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_height', WindowHeightImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_x', WindowXImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_y', WindowYImages)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_image_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_legend_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
<par name="WindowWidth" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display a legend.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_images_height', WindowImagesHeight)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_width', WindowImagesWidth)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_x', WindowImagesX)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_y', WindowImagesY)</l>
<l>dev_open_window (WindowImagesY, WindowImagesX + WindowImagesWidth + 5, WindowWidth, WindowImagesHeight, 'black', WindowHandleLegend)</l>
<l>set_display_font (WindowHandleLegend, 14, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_legend_window">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="WindowWidth"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_image_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes the image window.</c>
<c></c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    dev_set_window (WindowHandleImages)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key.</c>
<l>    remove_dict_key (ExampleInternals, 'window_images')</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_image_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_evaluation_measures">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows an overview of evaluation measures.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* * Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'The evaluation of a classification model is performed by '</l>
<l>Text[|Text|] := 'the procedure \'evaluate_dl_model\'.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In classification the whole image is assigned to a class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In the following, the measures and possible visualizations are introduced.'</l>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<c></c>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_evaluation_measures">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_legend_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes the legend window.</c>
<c></c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    dev_set_window (WindowHandleLegend)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key.</c>
<l>    remove_dict_key (ExampleInternals, 'window_legend')</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_legend_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_example_reset_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure resets the graphics windows.</c>
<c></c>
<c>* Close any windows that are listed in key 'window_handles_to_close'.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandlesToClose)</l>
<l>catch (Exception)</l>
<l>    WindowHandlesToClose := []</l>
<l>endtry</l>
<l>for I := 0 to |WindowHandlesToClose| - 1 by 1</l>
<l>    dev_set_window (WindowHandlesToClose[I])</l>
<l>    dev_close_window ()</l>
<l>endfor</l>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', [])</l>
<c></c>
<c>* Open image window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_images', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_needed', WindowImagesNeeded)</l>
<l>if (WindowImagesNeeded and Index == -1)</l>
<c>    * Open new window for images</c>
<l>dev_open_example_image_window (ExampleInternals)</l>
<l>elseif (not WindowImagesNeeded and Index != -1)</l>
<c>    * Window for images exists but is not needed -&gt; close it</c>
<l>dev_close_example_image_window (ExampleInternals)</l>
<l>endif</l>
<c></c>
<c>* Open legend window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_legend', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_legend_needed', WindowLegendNeeded)</l>
<l>if (WindowLegendNeeded and Index == -1)</l>
<c>    * Open new window for legend</c>
<l>dev_open_example_legend_window (ExampleInternals, 280)</l>
<l>elseif (not WindowLegendNeeded and Index != -1)</l>
<c>    * Window for legend exists but is not needed -&gt; close it</c>
<l>dev_close_example_legend_window (ExampleInternals)</l>
<l>endif</l>
<c></c>
<c>* Set the correct area (part) of the image window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    dev_set_window (WindowHandleImages)</l>
<l>    dev_clear_window ()</l>
<c>    * Set default window extends</c>
<l>    dev_set_window_extents (360, 0, 800, 500)</l>
<l>    dev_set_part (1, 1, -1, -1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c>* Set the correct area (part) of the legend window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    dev_set_window (WindowHandleLegend)</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_part (1, 1, -1, -1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<l>dev_clear_window ()</l>
<l>return ()</l>
</body>
<docu id="dev_display_example_reset_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes all example windows.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>get_dict_param (ExampleInternals, 'keys', [], Keys)</l>
<l>for Index := 0 to |Keys| by 1</l>
<l>    try</l>
<l>        get_dict_tuple (ExampleInternals, Keys[Index], WindowHandle)</l>
<l>        dev_set_window (WindowHandle)</l>
<l>        dev_close_window ()</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_confusion_matrix">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the pixel accuracy.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'Evaluation measures: Confusion matrix'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Knowing the ground truth class, we can compare the class affiliations:'</l>
<l>Text[|Text|] := 'the predicted one and the correct one.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'A confusion matrix is a table with such comparisons. This table makes'</l>
<l>Text[|Text|] := 'it easy to see how well the network performs for each class. For every'</l>
<l>Text[|Text|] := 'class it lists how many instances have been predicted into which class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In HALCON, we represent for each class the instances with this'</l>
<l>Text[|Text|] := 'ground truth label in a column and the instances predicted '</l>
<l>Text[|Text|] := 'to belong to this class in a row. '</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_confusion_matrix">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_topK">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the Mean IoU.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'Evaluation measures: top-k error'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'For a given image, the classifier infers class confidences of'</l>
<l>Text[|Text|] := 'how likely the image belongs to every distinguished class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The top-k error tells the ratio of predictions where the ground truth class'</l>
<l>Text[|Text|] := 'is not within the k predicted classes with the highest confidences.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'E.g., in the case of top-1 error, we check if the target label matches'</l>
<l>Text[|Text|] := 'the prediction with the highest probability.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<c></c>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="dev_display_screen_topK">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_text_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowBGColor := 'gray'</l>
<l>dev_open_window (0, 0, WindowWidthText, WindowHeightText, WindowBGColor, WindowHandleText)</l>
<l>set_display_font (WindowHandleText, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_width', WindowWidthText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_height', WindowHeightText)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_text_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_visual_inspection_intro">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the visual inspection tools.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display text.</c>
<l>Text := 'Visual inspection:'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Use the procedure \'dev_display_dl_interactive_confusion_matrix\''</l>
<l>Text[|Text|] := 'to show a confusion matrix and interactively display the images'</l>
<l>Text[|Text|] := 'by clicking on the matrix entries.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'For a quick generation of a heatmap of an image to analyze its'</l>
<l>Text[|Text|] := 'classification result use the operator \'gen_dl_model_heatmap\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_visual_inspection_intro">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_example_init">
<interface>
<ic>
<par name="ShowExampleScreens" base_type="ctrl" dimension="0"/>
<par name="UsePretrainedModel" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used for explanations during the example.</c>
<c></c>
<c>* A dictionary that will be used/adapted by other example procedures.</c>
<l>create_dict (ExampleInternals)</l>
<l>set_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>set_dict_tuple (ExampleInternals, 'use_pretrained_model', UsePretrainedModel)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>dev_close_window ()</l>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowBGColor := 'gray'</l>
<l>dev_open_window (0, 0, WindowWidthText, WindowHeightText, WindowBGColor, WindowHandleText)</l>
<l>set_display_font (WindowHandleText, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_width', WindowWidthText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_height', WindowHeightText)</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_example_init">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="ShowExampleScreens">
<default_type>integer</default_type>
<default_value>0</default_value>
<description lang="en_US">A boolean that is used to enable/disable explanation screens in this example</description>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
<type_list>
<item>integer</item>
</type_list>
<value_max>1</value_max>
<value_min>0</value_min>
</parameter>
<parameter id="UsePretrainedModel"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_model_optimization_info">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure mentions that we</c>
<c>* optimize the model for memory consumption</c>
<c>* at the end of this example.</c>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display text.</c>
<l>Text := 'Model optimization:'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'At the end of this example the models'</l>
<l>Text[|Text|] := 'memory consumption is optimized for inference'</l>
<l>Text[|Text|] := '(for inference see part 4 of the example series).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'To do so, we will set'</l>
<l>Text[|Text|] := '  \'batch_size\' := 1'</l>
<l>Text[|Text|] := 'and free the memory used for gradients by'</l>
<l>Text[|Text|] := '  \'optimize_for_inference\' := \'true\'.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Note that we will save the memory optimized model'</l>
<l>Text[|Text|] := 'over the read model.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_model_optimization_info">
<abstract lang="en_US">Mention that this example will save the model in a state optimized for inference.</abstract>
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="check_data_availability">
<interface>
<ic>
<par name="ExampleDataDir" base_type="ctrl" dimension="0"/>
<par name="DLDatasetFileName" base_type="ctrl" dimension="0"/>
<par name="TrainedModelFileName" base_type="ctrl" dimension="0"/>
<par name="UsePretrainedModel" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure checks the availability of all files required to run the</c>
<c>* evaluation example.</c>
<c></c>
<l>file_exists (ExampleDataDir, FileExists)</l>
<l>if (not FileExists)</l>
<l>    throw (ExampleDataDir + ' does not exist. Please run part 1 of example series.')</l>
<l>endif</l>
<c></c>
<l>file_exists (DLDatasetFileName, FileExists)</l>
<l>if (not FileExists)</l>
<l>    throw (DLDatasetFileName + ' does not exist. Please run part 1 of example series.')</l>
<l>endif</l>
<c></c>
<l>file_exists (TrainedModelFileName, FileExists)</l>
<l>if (not FileExists)</l>
<l>    if (UsePretrainedModel)</l>
<l>        throw (TrainedModelFileName + ' does not exist. Please run the HALCON Deep Learning installer.')</l>
<l>    else</l>
<l>        throw (TrainedModelFileName + ' does not exist. Please run part 2 of example series.')</l>
<l>    endif</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="check_data_availability">
<parameters>
<parameter id="DLDatasetFileName"/>
<parameter id="ExampleDataDir"/>
<parameter id="TrainedModelFileName"/>
<parameter id="UsePretrainedModel"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_device">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
<par name="DLDevice" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure displays information about the used device.</c>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>get_dl_device_param (DLDevice, 'type', DLDeviceType)</l>
<l>get_dl_device_param (DLDevice, 'name', DLDeviceName)</l>
<c></c>
<l>Text := 'This example can be run on a GPU or CPU.'</l>
<l>Text[|Text|] := ''</l>
<l>if (DLDeviceType != 'gpu')</l>
<l>    Text[|Text|] := 'No GPU with necessary drivers and libraries has been found.'</l>
<l>    Text[|Text|] := ''</l>
<l>endif</l>
<l>Text[|Text|] := 'This example will run the deep learning operators'</l>
<l>Text[|Text|] := 'on the following device:'</l>
<l>Text[|Text|] := 'Device type: ' + DLDeviceType</l>
<l>Text[|Text|] := 'Device name: ' + DLDeviceName</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_device">
<abstract lang="en_US">Display a message to mention on which device the deep learning operators will run.</abstract>
<parameters>
<parameter id="DLDevice"/>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_final">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows the final screen for the example.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>dev_open_example_text_window (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>Text := 'In this example we have seen:'</l>
<l>Text[|Text|] := ' - which evaluation measures can be computed for a classification model'</l>
<l>Text[|Text|] := ' - how the model is evaluated by means of measures and visual inspection'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'If the performance of the model satisfies the requirements,'</l>
<l>Text[|Text|] := 'it can now be applied to new images.'</l>
<l>Text[|Text|] := 'How this is done, is explained in the next example'</l>
<l>Text[|Text|] := '\'classify_pill_defects_deep_learning_4_infer.hdev\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Please open the next example.', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandleText)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_final">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_run_program">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure informs about the code that will be executed.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introduction text.</c>
<l>get_dict_tuple (ExampleInternals, 'use_pretrained_model', UsePretrainedModel)</l>
<l>if (UsePretrainedModel)</l>
<l>    Text := 'We will now evaluate the pretrained model shipped with HALCON.'</l>
<l>else</l>
<l>    Text := 'We will now evaluate the retrained model from example part 2'</l>
<l>    Text[|Text|] := '\'classify_pill_defects_deep_learning_2_train.hdev\'.'</l>
<l>endif</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'First, we calculate the evaluation measure on the \'test\'-split.'</l>
<l>Text[|Text|] := 'We display the resulting measures and a confusion matrix.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Then, we display an interactive confusion matrix.'</l>
<l>Text[|Text|] := 'Clicking on an entry, the corresponding images are shown.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Finally, a heatmap is shown for a set of images. Here, '</l>
<l>Text[|Text|] := 'we will do this for images labeled and classified as \'contamination\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandleText)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_run_program">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
</hdevelop>
