<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.2.0">
<procedure name="main">
<interface/>
<body>
<c>* 本示例是一系列示例的一部分，总结了DL分类的工作流程。它使用了MVTec药丸数据集。</c>
<c>* </c>
<c>* 四个部分分别是：</c>
<c>* 1. 数据集预处理。</c>
<c>* 2. 模型训练。</c>
<c>* 3. 训练模型的评估。</c>
<c>* 4. 对新图像进行推断。</c>
<c>* </c>
<c>* 提示：要获取工作流程的简洁版本，请查看示例：</c>
<c>* dl_classification_workflow.hdev</c>
<c>* </c>
<c>* 本示例包含第1部分：“数据集预处理”。</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* 在此示例中，在执行预处理步骤之前，将以图形窗口的形式进行解释。</c>
<c>* 将以下参数设置为false以跳过此可视化。</c>
<l>ShowExampleScreens := true</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * 初始示例窗口和参数等。</c>
<l>    dev_example_init (ShowExampleScreens, ExampleInternals)</l>
<c>    * </c>
<c>    * 示例系列的介绍文本。</c>
<l>    dev_display_screen_introduction_part_1 (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_introduction_part_2 (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 读取数据集。</c>
<l>    dev_display_screen_read_dataset (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 解释数据集拆分。</c>
<l>    dev_display_screen_split_dataset (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * 解释如何预处理数据集并运行程序。</c>
<l>    dev_display_screen_run_program (ExampleInternals)</l>
<l>    stop ()</l>
<l>endif</l>
<c>* </c>
<c>* *********************************</c>
<c>* **   设置输入/输出路径   ***</c>
<c>* *********************************</c>
<c>* </c>
<c>* 获取示例的路径。</c>
<l>get_system ('example_dir', PathExample)</l>
<c>* 包含地面实况分类图像数据的文件夹。</c>
<l>RawImageBaseFolder := PathExample + '/images/pill/'</l>
<c>* </c>
<c>* 所有示例数据都写入此文件夹。</c>
<l>ExampleDataDir := 'classify_pill_defects_data'</l>
<c>* preprocess_dl_dataset写入的任何输出的数据集目录基名。</c>
<l>DataDirectoryBaseName := ExampleDataDir + '/dldataset_pill'</l>
<c>* </c>
<c>* *************************</c>
<c>* **   设置参数   ***</c>
<c>* *************************</c>
<c>* </c>
<c>* 用于读取数据集的LabelSource。</c>
<l>LabelSource := 'last_folder'</l>
<c>* </c>
<c>* 用于拆分数据集的百分比。</c>
<l>TrainingPercent := 70</l>
<l>ValidationPercent := 15</l>
<c>* </c>
<c>* 一些模型可能存在关于图像属性的限制，</c>
<c>* 请参阅read_dl_model()以获取您选择的模型。</c>
<c>* 图像在预处理期间调整大小的尺寸。</c>
<l>ImageWidth := 300</l>
<l>ImageHeight := 300</l>
<l>ImageNumChannels := 3</l>
<c>* </c>
<c>* 图像预处理的进一步参数。</c>
<l>NormalizationType := 'none'</l>
<l>DomainHandling := 'full_domain'</l>
<c>* </c>
<c>* 为了获得可重现的拆分，我们设置了一个随机种子。</c>
<c>* 这意味着重新运行脚本将导致DLDataset的相同拆分。</c>
<l>SeedRand := 42</l>
<c>* </c>
<c>* *****************************************************************************</c>
<c>* **   读取标记数据并将其拆分为训练、验证和测试   ***</c>
<c>* *****************************************************************************</c>
<c>* </c>
<c>* 设置随机种子。</c>
<l>set_system ('seed_rand', SeedRand)</l>
<c>* </c>
<c>* 使用read_dl_dataset_classification过程读取数据集。</c>
<c>* 或者，您可以读取由MVTec深度学习工具创建的DLDataset字典</c>
<c>* 使用read_dict()。</c>
<l>read_dl_dataset_classification (RawImageBaseFolder, LabelSource, DLDataset)</l>
<c>* 生成拆分。</c>
<l>split_dl_dataset (DLDataset, TrainingPercent, ValidationPercent, [])</l>
<c>* </c>
<c>* </c>
<c>* *********************************</c>
<c>* **   预处理数据集   ***</c>
<c>* *********************************</c>
<c>* </c>
<c>* 如果尚不存在，创建输出目录。</c>
<l>file_exists (ExampleDataDir, FileExists)</l>
<l>if (not FileExists)</l>
<l>    make_dir (ExampleDataDir)</l>
<l>endif</l>
<c>* </c>
<c>* 创建预处理参数。</c>
<l>create_dl_preprocess_param ('classification', ImageWidth, ImageHeight, ImageNumChannels, -127, 128, NormalizationType, DomainHandling, [], [], [], [], DLPreprocessParam)</l>
<c>* </c>
<c>* preprocess_dl_dataset写入的任何输出的数据集目录。</c>
<l>DataDirectory := DataDirectoryBaseName + '_' + ImageWidth + 'x' + ImageHeight</l>
<c>* </c>
<c>* 预处理数据集。这可能需要几秒钟。</c>
<l>GenParam := dict{overwrite_files: 'auto'}</l>
<l>preprocess_dl_dataset (DLDataset, DataDirectory, DLPreprocessParam, GenParam, DLDatasetFileName)</l>
<c>* </c>
<c>* 将预处理参数单独存储以在推断期间使用。</c>
<l>PreprocessParamFileBaseName := DataDirectory + '/dl_preprocess_param.hdict'</l>
<l>write_dict (DLPreprocessParam, PreprocessParamFileBaseName, [], [])</l>
<c>* </c>
<c>* *******************************************</c>
<c>* **   预览预处理的数据集   ***</c>
<c>* *******************************************</c>
<c>* </c>
<c>* 在进行训练之前，建议检查预处理后的数据集。</c>
<c>* </c>
<c>* 显示10个随机选定的训练图像的DLSamples。</c>
<l>find_dl_samples (DLDataset.samples, 'split', 'train', 'match', SampleIndices)</l>
<l>tuple_shuffle (SampleIndices, ShuffledIndices)</l>
<l>read_dl_samples (DLDataset, ShuffledIndices[0:9], DLSampleBatchDisplay)</l>
<c>* </c>
<l>WindowHandleDict := dict{}</l>
<l>for Index := 0 to |DLSampleBatchDisplay| - 1 by 1</l>
<c>    * 在DLSampleBatchDisplay中循环样本。</c>
<l>    dev_display_dl_data (DLSampleBatchDisplay[Index], [], DLDataset, 'classification_ground_truth', [], WindowHandleDict)</l>
<l>    Text := 'Press Run (F5) to continue'</l>
<l>    dev_disp_text (Text, 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* 关闭用于可视化的窗口。</c>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * 下一个DL分类训练过程示例的提示。</c>
<l>    dev_display_screen_next_example (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * 关闭示例窗口。</c>
<l>    dev_close_example_windows (ExampleInternals)</l>
<l>endif</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dev_display_screen_introduction_part_2">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure gives an introduction to the example</c>
<c>* and shows some image examples.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the introduction to the example.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>Text := 'In this example we will explain how labeled data is'</l>
<l>Text[|Text|] := 'read to the expected format and preprocessed'</l>
<l>Text[|Text|] := 'to make it suitable for training.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Below, you see a few example images of the MVTec pill dataset.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<c>* Display example images.</c>
<l>dev_display_pills_example_dataset_preview (ExampleInternals)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_introduction_part_2">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_read_dataset">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains reading the dataset.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>Text := 'There are two possibilities to read in the dataset.'</l>
<l>Text[|Text|] := 'Either there is an existing dictionary or the raw images are present'</l>
<l>Text[|Text|] := 'and labeled in separate folders.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'If a dictionary already exists you can read in your dataset using'</l>
<l>Text[|Text|] := 'the operator \'read_dict\'.'</l>
<l>Text[|Text|] := 'Such a DLDataset dictionary can be created by'</l>
<l>Text[|Text|] := 'e.g., the MVTec Deep Learning Tool.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'If there are raw images with labels you can read your classification'</l>
<l>Text[|Text|] := 'images using the procedure \'read_dl_dataset_classification\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<l>return ()</l>
</body>
<docu id="dev_display_screen_read_dataset">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes all example windows.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>get_dict_param (ExampleInternals, 'keys', [], Keys)</l>
<l>for Index := 0 to |Keys| by 1</l>
<l>    try</l>
<l>        get_dict_tuple (ExampleInternals, Keys[Index], WindowHandle)</l>
<l>        dev_set_window (WindowHandle)</l>
<l>        dev_close_window ()</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_split_dataset">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the splitting of the dataset.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Set the parameters used for the split in the example.</c>
<l>TrainRatio := 0.7</l>
<l>ValRatio := 0.15</l>
<l>TestRatio := 1.0 - TrainRatio - ValRatio</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', true)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<l>set_window_param (WindowHandleText, 'flush', 'false')</l>
<c></c>
<l>Text := 'The procedure \'split_dl_dataset\' splits the dataset'</l>
<l>Text[|Text|] := 'randomly into three subsets.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'This is important in order to evaluate the generalization'</l>
<l>Text[|Text|] := 'capabilities of the learned model more realistically.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In this example, we use the ratios for splitting as displayed below. '</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<c></c>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<c>* Visualize the split used for the example settings.</c>
<l>get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>dev_set_window (WindowHandleImages)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_width', Width)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_height', Height)</l>
<c></c>
<l>dev_set_part (0, 0, Height, Width)</l>
<c></c>
<c>* Create a pie chart for visualization.</c>
<l>PieChartCenterRow := Height / 2.0</l>
<l>PieChartCenterCol := Width / 2.0</l>
<l>PieChartRadius := min([Width,Height]) * 0.425</l>
<c></c>
<l>Colors := ['#000088', '#0000aa', '#0000cc'] + 'ff'</l>
<c></c>
<l>pi := 4.0 * atan(1.0)</l>
<l>Ratios := [TrainRatio,ValRatio,TestRatio]</l>
<l>Text := ['Train', 'Validation', 'Test']</l>
<l>alpha := 0</l>
<l>dev_display_pie_chart (WindowHandleImages, Ratios, PieChartCenterRow, PieChartCenterCol, PieChartRadius, Colors, [])</l>
<l>for K := 0 to |Ratios| - 1 by 1</l>
<l>    alpha := alpha + Ratios[K] * pi</l>
<l>    Text[K] := Text[K] + ' ' + int(Ratios[K] * 100) + '%'</l>
<l>    get_string_extents (WindowHandleImages, Text[K], Ascent, Descent, TextWidth, TextHeight)</l>
<l>    if ((alpha &gt;= pi / 4.0) and (pi &lt;= 3 * pi / 4.0))</l>
<l>        Row := PieChartCenterRow - cos(alpha) * PieChartRadius - TextWidth / 2.0</l>
<l>    else</l>
<l>        Row := PieChartCenterRow - cos(alpha) * PieChartRadius</l>
<l>    endif</l>
<l>    Col := PieChartCenterCol - sin(alpha) * PieChartRadius</l>
<l>    if (alpha &lt;= pi / 2.0)</l>
<l>    else</l>
<l>        Col := PieChartCenterCol - sin(alpha) * PieChartRadius - TextWidth / 2.0</l>
<l>    endif</l>
<l>    dev_disp_text (Text[K], 'image', Row, Col, 'black', [], [])</l>
<l>    alpha := alpha + Ratios[K] * pi</l>
<l>endfor</l>
<c></c>
<l>flush_buffer (WindowHandleText)</l>
<l>set_window_param (WindowHandleText, 'flush', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_split_dataset">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_introduction_part_1">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure displays an overview on the different example parts.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the overview on the different example parts.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>Text := 'This example is part of a series of examples, which summarize '</l>
<l>Text[|Text|] := 'the workflow for DL classification. It uses the MVTec pill dataset.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The four parts are: '</l>
<l>Text[|Text|] := '1. Dataset preprocessing.'</l>
<l>Text[|Text|] := '2. Training of the model.'</l>
<l>Text[|Text|] := '3. Evaluation of the trained model.'</l>
<l>Text[|Text|] := '4. Inference on new images.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'This example covers part 1: \'Dataset preprocessing\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_introduction_part_1">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_next_example">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure gives a hint to the next classification example 'classify_pill_defects_deep_learning_2_train.hdev'</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>Text := 'Now the first part \'Dataset preprocessing\' of the workflow'</l>
<l>Text[|Text|] := 'for DL classification is finished.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The dataset is ready for training. '</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'To get to the example of the DL classification training process'</l>
<l>Text[|Text|] := 'please open \'classify_pill_defects_deep_learning_2_train.hdev\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Please open the next example.', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_next_example">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_example_init">
<interface>
<ic>
<par name="ShowExampleScreens" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used for explanations during the example.</c>
<c></c>
<c>* A dict that will be used/adapted by other example procedures.</c>
<l>create_dict (ExampleInternals)</l>
<l>set_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<c></c>
<l>dev_close_window ()</l>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowBGColor := 'gray'</l>
<l>dev_open_window (0, 0, WindowWidthText, WindowHeightText, WindowBGColor, WindowHandleText)</l>
<l>set_display_font (WindowHandleText, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_width', WindowWidthText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_height', WindowHeightText)</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'clear_windows', 'all')</l>
<c></c>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="dev_example_init">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="ShowExampleScreens">
<default_type>integer</default_type>
<default_value>0</default_value>
<description lang="en_US">A boolean that is used to enable/disable explanation screens in this example</description>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
<type_list>
<item>integer</item>
</type_list>
<value_max>1</value_max>
<value_min>0</value_min>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_image_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display example images.</c>
<c></c>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowWidthImage := 800</l>
<l>WindowHeightImages := 500</l>
<l>WindowBGColor := 'gray'</l>
<c></c>
<l>WindowYImages := WindowHeightText + 60</l>
<l>WindowXImages := 0</l>
<l>dev_open_window (WindowYImages, WindowXImages, WindowWidthImage, WindowHeightImages, WindowBGColor, WindowHandleImages)</l>
<l>set_display_font (WindowHandleImages, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_width', WindowWidthImage)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_height', WindowHeightImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_x', WindowXImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_y', WindowYImages)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_image_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_legend_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
<par name="WindowWidth" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display a legend.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_images_height', WindowImagesHeight)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_width', WindowImagesWidth)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_x', WindowImagesX)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_y', WindowImagesY)</l>
<l>dev_open_window (WindowImagesY, WindowImagesX + WindowImagesWidth + 5, WindowWidth, WindowImagesHeight, 'black', WindowHandleLegend)</l>
<l>set_display_font (WindowHandleLegend, 14, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_legend_window">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="WindowWidth"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_run_program">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows a final text before starting with preprocessing.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>Text := 'After reading and splitting the dataset it is ready to be preprocessed.'</l>
<l>Text[|Text|] := 'This can be done by using \'preprocess_dl_dataset\'.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In this context, the program will now start to preprocess the data.'</l>
<l>Text[|Text|] := 'This can take a few seconds.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'A variable inspect window will show the progress of the preprocessing.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'After preprocessing, it is recommended to check the'</l>
<l>Text[|Text|] := 'preprocessed dataset. Therefore, some samples will be'</l>
<l>Text[|Text|] := 'displayed at the end of the program.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<l>return ()</l>
</body>
<docu id="dev_display_screen_run_program">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_pills_example_dataset_preview">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure displays a selection of pill images.</c>
<c></c>
<l>try</l>
<c>    * Read some example images.</c>
<l>    GinsengPath := 'pill/ginseng/' + ['good/pill_ginseng_good_001', 'contamination/pill_ginseng_contamination_004', 'crack/pill_ginseng_crack_001']</l>
<l>    MagnesiumPath := 'pill/magnesium/' + ['good/pill_magnesium_good_001', 'contamination/pill_magnesium_contamination_001', 'crack/pill_magnesium_crack_001']</l>
<l>    MintPath := 'pill/mint/' + ['good/pill_mint_good_001', 'contamination/pill_mint_contamination_001', 'crack/pill_mint_crack_009']</l>
<l>    read_image (Image, [GinsengPath,MagnesiumPath,MintPath])</l>
<l>    tile_images (Image, TiledImage, 3, 'horizontal')</l>
<c>    * Generate background image.</c>
<l>    get_image_size (TiledImage, Width, Height)</l>
<l>    gen_image_proto (TiledImage, ImageR, 18)</l>
<l>    gen_image_proto (TiledImage, ImageG, 22)</l>
<l>    gen_image_proto (TiledImage, ImageB, 28)</l>
<l>    append_channel (ImageR, ImageG, ImageRG)</l>
<l>    append_channel (ImageRG, ImageB, ImageRGB)</l>
<c>    * Get the image window handle.</c>
<l>dev_open_example_image_window (ExampleInternals)</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowImages)</l>
<l>    dev_set_window (WindowImages)</l>
<c>    * Display the background and the images.</c>
<l>    get_image_size (ImageRGB, Width1, Height1)</l>
<l>    dev_set_part (0, 0, Height1, Width1)</l>
<l>    dev_display (ImageRGB)</l>
<l>    dev_display (TiledImage)</l>
<l>catch (Exception)</l>
<l>    get_dict_tuple (ExampleInternals, 'window_text', WindowText)</l>
<l>    dev_set_window (WindowText)</l>
<c>    * If the example image files are not found, an error message is displayed.</c>
<l>    ErrorAndAdviceText := 'The images required for this example could not be found.'</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'These images are part of a separate installer. Please']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'refer to the Installation Guide for more information on']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'this topic!']</l>
<l>    dev_clear_window ()</l>
<l>set_display_font (WindowText, 20, 'mono', 'true', 'false')</l>
<l>    dev_disp_text (ErrorAndAdviceText, 'window', 'top', 'left', 'red', [], [])</l>
<l>set_display_font (WindowText, 16, 'mono', 'true', 'false')</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="dev_display_pills_example_dataset_preview">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_example_reset_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure resets the graphics windows.</c>
<c></c>
<c>* Close any windows that are listed in key 'window_handles_to_close'.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandlesToClose)</l>
<l>catch (Exception)</l>
<l>    WindowHandlesToClose := []</l>
<l>endtry</l>
<l>for I := 0 to |WindowHandlesToClose| - 1 by 1</l>
<l>    dev_set_window (WindowHandlesToClose[I])</l>
<l>    dev_close_window ()</l>
<l>endfor</l>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', [])</l>
<c></c>
<c>* Open image window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_images', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_needed', WindowImagesNeeded)</l>
<l>if (WindowImagesNeeded and Index == -1)</l>
<c>    * Open new window for images</c>
<l>dev_open_example_image_window (ExampleInternals)</l>
<l>elseif (not WindowImagesNeeded and Index != -1)</l>
<c>    * Window for images exists but is not needed -&gt; close it</c>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    dev_set_window (WindowHandleImages)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key</c>
<l>    remove_dict_key (ExampleInternals, 'window_images')</l>
<l>endif</l>
<c></c>
<c>* Open legend window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_legend', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_legend_needed', WindowLegendNeeded)</l>
<l>if (WindowLegendNeeded and Index == -1)</l>
<c>    * Open new window for legend</c>
<l>dev_open_example_legend_window (ExampleInternals, 280)</l>
<l>elseif (not WindowLegendNeeded and Index != -1)</l>
<c>    * Window for legend exists but is not needed -&gt; close it</c>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    dev_set_window (WindowHandleLegend)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key</c>
<l>    remove_dict_key (ExampleInternals, 'window_legend')</l>
<l>endif</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'clear_windows', ClearWindows)</l>
<l>ClearAllWindows := find(ClearWindows,'all')</l>
<l>if (|ClearAllWindows| and ClearAllWindows &gt; -1)</l>
<l>    ClearAllWindows := true</l>
<l>else</l>
<l>    ClearAllWindows := false</l>
<l>endif</l>
<c></c>
<c>* Set the correct area (part) of the image window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    ClearImageWindow := find(ClearWindows,WindowHandleImages)</l>
<l>    if (ClearAllWindows or (|ClearImageWindow| and ClearImageWindow &gt; -1))</l>
<l>        dev_set_window (WindowHandleImages)</l>
<l>        dev_clear_window ()</l>
<l>        dev_set_part (1, 1, -1, -1)</l>
<l>    endif</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c>* Set the correct area (part) of the legend window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    ClearLegendWindow := find(ClearWindows,WindowHandleLegend)</l>
<l>    if (ClearAllWindows or (|ClearLegendWindow| and ClearLegendWindow &gt; -1))</l>
<l>        dev_set_window (WindowHandleLegend)</l>
<l>        dev_clear_window ()</l>
<l>        dev_set_part (1, 1, -1, -1)</l>
<l>    endif</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>    ClearTextWindow := find(ClearWindows,WindowHandleText)</l>
<l>    if (ClearAllWindows or (|ClearTextWindow| and ClearTextWindow &gt; -1))</l>
<l>        dev_set_window (WindowHandleText)</l>
<l>        dev_clear_window ()</l>
<l>    endif</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="dev_display_example_reset_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
